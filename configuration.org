#+TITLE: Emacs configuration
#+AUTHOR: Stephen Bradley (adapted from Alain M. Lafon, alain@200ok.ch)

This repository contains my Emacs configuration. It is written and
documented in literate programming style.

* Installation

*Initial*

Emacs configuration is usually done in the home directory in the
=.emacs.d= folder. This holds true for Unix and Linux systems. For
Windows, look it up [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html][here]].

=git clone git@github.com:rotwatsb/emacs.d.git ~/.emacs.d=

*Dependencies*

Emacs dependencies/libraries are managed via the internal [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages][package
management system]]. To initially install packages, open
=~/.emacs.d/init.el=, refresh your package list with =M-x
package-refresh-contents= and install everything using =M-x
eval-buffer=.

* Dependency management

** Define package repositories (archives)

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Define packages that are to be installed

List all used third-party packages. Most will be configured further
down in this file, some are used with the default configuration.

#+BEGIN_SRC emacs-lisp

  (defvar my-packages '(ag
                        browse-kill-ring
                        flycheck
                        flycheck-rust
                        flx-ido
                        auto-complete
                        web-mode
                        exec-path-from-shell
                        js2-mode
                        js2-refactor
                        rainbow-mode
                        ini-mode
                        comment-tags
                        sass-mode
                        pug-mode
                        yaml-mode
                        pdf-tools
                        tern
                        tern-auto-complete
                        projectile
                        markdown-mode
                        restclient
                        rust-mode
                        magit
                        which-key
                        git-link
                        writeroom-mode
                        writegood-mode))
#+END_SRC

** Install packages

#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-refresh-contents)
      (package-install p))
    (add-to-list 'package-selected-packages p))
#+END_SRC

* Default Settings
This section contains settings for built-in Emacs features.

** Gargabe Collection

Allow 20MB of memory (instead of 0.76MB) before calling garbage
collection. This means GC runs less often, which speeds up some
operations.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Auto-Save in =/tmp=

Store backups and auto-saved files in =TEMPORARY-FILE-DIRECTORY= (which
defaults to /tmp on Unix), instead of in the same directory as the
file.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

** Always follow symlinks
   When opening a file, always follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** Sentences have one space after a period
Don't assume that sentences should have two spaces after
periods.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Confirm before closing Emacs
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Human readable units in =dired-mode=

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Ask =y/n= instead of =yes/no=
   This is a favorable shorthand.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Auto revert files on change
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Shortcut for changing font-size
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-1") 'text-scale-increase)
  (define-key global-map (kbd "C-0") 'text-scale-decrease)
#+END_SRC
** Disable startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+END_SRC

** Do not display GUI Toolbar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

** Automatic Line Breaks
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** Enable Narrow To Region

Enable narrow-to-region (C-x n n / C-x n w). This is disabled by
default to not confuse beginners.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Disable scroll bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Remember the cursor position of files when reopening them
#+BEGIN_SRC emacs-lisp
  (setq save-place-file "~/.emacs.d/saveplace")
  (setq-default save-place t)
  (require 'saveplace)
#+END_SRC
** Set $MANPATH, $PATH and exec-path from shell even when started from GUI helpers like =dmenu= or =Spotlight=

#+BEGIN_SRC emacs-lisp

    (exec-path-from-shell-initialize)

#+END_SRC
** =windmove=

Windmove is built into Emacs. It lets you move point from window to
window using Shift and the arrow keys. This is easier to type than
‘C-x o’ when there are multiple windows open.

#+BEGIN_SRC emacs-lisp

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

#+END_SRC

** =winner-mode=

Allows to 'undo' (and 'redo') changes in the window configuration with
the key commands ‘C-c left’ and ‘C-c right’.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

Getting from many windows to one window is easy: 'C-x 1' will do it.
But getting back to a delicate WindowConfiguration is difficult. This
is where Winner Mode comes in: With it, going back to a previous
session is easy.
** Bell
   Do not ring the system bell or show a visible feedback.

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** AngeFtp
Try to use passive mode for FTP.

Note: Some firewalls might not allow standard active mode. However:
Some FTP Servers might not allow passive mode. So if there's problems
when connecting to an FTP, try to revert to active mode.
#+BEGIN_SRC emacs-lisp
(setq ange-ftp-try-passive-mode t)
#+END_SRC
** eww
   When entering eww, use cursors to scroll without changing point.
#+BEGIN_SRC emacs-lisp
  (add-hook 'eww-mode-hook 'scroll-lock-mode)
#+END_SRC
** Custom-File
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+END_SRC
* General
This section contains settings for non-built-in Emacs features that
are generally applicable to different kinds of modes.
** =browse-kill-ring=
Ever wish you could just look through everything you've killed
recently to find out if you killed that piece of text that you think
you killed (or yanked), but you're not quite sure? If so, then
browse-kill-ring is the Emacs extension for you.

#+BEGIN_SRC emacs-lisp
  (require 'browse-kill-ring)
  (setq browse-kill-ring-highlight-inserted-item t
        browse-kill-ring-highlight-current-entry nil
        browse-kill-ring-show-preview t)
  (define-key browse-kill-ring-mode-map (kbd "j") 'browse-kill-ring-forward)
  (define-key browse-kill-ring-mode-map (kbd "k") 'browse-kill-ring-previous)
#+END_SRC

* ido-mode

=ido= means "Interactively Do Things"

This changes many defaults like =find-file= and switching
buffers. =ido= has a completion engine that's sensible to use
everywhere.

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

* Search

Replace i-search-(forward|backward) with their respective regexp
capable counterparts

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

#+END_SRC

* Which Key
  =which-key= displays available keybindings in a popup.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'which-key-mode)
#+END_SRC

* Programming
** General
*** Auto Complete
https://github.com/auto-complete/auto-complete

Basic Configuration
#+BEGIN_SRC emacs-lisp
  (ac-config-default)
#+END_SRC
*** Tabs
Set tab width to 4 for all buffers

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Use 4 spaces instead of a tab.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4 indent-tabs-mode nil)
#+END_SRC

Indentation cannot insert tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Use 4 spaces instead of tabs for programming languages.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 4)

  (setq python-indent 4)

  (setq css-indent-offset 2)

  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 4
                    sh-indentation 4)))

  (setq web-mode-markup-indent-offset 4)
#+END_SRC

*** Syntax Checking

http://www.flycheck.org/

Enable global on the fly syntax checking through =flycheck=.

#+BEGIN_SRC emacs-lisp

  (add-hook 'after-init-hook #'global-flycheck-mode)

#+END_SRC
*** Manage TODO/FIXME/XXX comments

https://github.com/vincekd/comment-tags

=comment-tags= highlights and lists comment tags such as 'TODO', 'FIXME', 'XXX'.

Commands (prefixed by =C-c t=):

    - =b= to list tags in current buffer (comment-tags-list-tags-buffer).
    - =a= to list tags in all buffers (comment-tags-list-tags-buffers).
    - =s= to jump to tag in current buffer by a word or phrase using reading-completion (comment-tags-find-tags-buffer).
    - =n= to jump to next tag from point (comment-tags-next-tag).
    - =p= to jump to previous tag from point (comment-tags-previous-tag).

#+BEGIN_SRC emacs-lisp
  (setq comment-tags-keymap-prefix (kbd "C-c t"))
  (with-eval-after-load "comment-tags"
    (setq comment-tags-keyword-faces
          `(("TODO" . ,(list :weight 'bold :foreground "#DF5427"))
            ("FIXME" . ,(list :weight 'bold :foreground "#DF5427"))
            ("BUG" . ,(list :weight 'bold :foreground "#DF5427"))
            ("HACK" . ,(list :weight 'bold :foreground "#DF5427"))
            ("KLUDGE" . ,(list :weight 'bold :foreground "#DF5427"))
            ("XXX" . ,(list :weight 'bold :foreground "#DF5427"))
            ("INFO" . ,(list :weight 'bold :foreground "#1FDA9A"))
            ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
    (setq comment-tags-comment-start-only t
          comment-tags-require-colon t
          comment-tags-case-sensitive t
          comment-tags-show-faces t
          comment-tags-lighter nil))
  (add-hook 'prog-mode-hook 'comment-tags-mode)
#+END_SRC

*** Auto-indent with the Return key

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Highlight matching parenthesis

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

*** Delete trailing whitespace

Delete trailing whitespace in all modes. _Except_ when editing
Markdown, because it uses [[http://daringfireball.net/projects/markdown/syntax#p][two trailing blanks]] as a signal to create a
line break.

#+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook '(lambda()
                                  (when (not (or (derived-mode-p 'markdown-mode)
                                                 (derived-mode-p 'org-mode))
                                    (delete-trailing-whitespace)))))
#+END_SRC

*** Compilation Mode
Tell compilation mode how to parse node stacktrace.

#+BEGIN_SRC emacs-lisp
  (add-hook
   'compilation-mode-hook
   (lambda ()
     (progn
       (setq compilation-error-regexp-alist-alist
             (cons '(node "^[  ]+at \\(?:[^\(\n]+ \(\\)?\\([a-zA-Z\.0-9_/-]+\\):\\([0-9]+\\):\\([0-9]+\\)\)?$"
                          1 ;; file
                          2 ;; line
                          3 ;; column
                          )
                   compilation-error-regexp-alist-alist))
       (setq compilation-error-regexp-alist
             (cons 'node compilation-error-regexp-alist)))))
#+END_SRC
** JavaScript
*** =js2-mode= and =tern=

JavaScript is improved with =js2-mode= as well as
[[http://ternjs.net/][Tern]].

Tern is a stand-alone code-analysis engine for JavaScript used for:

- Auto completion on variables and properties
- Function argument hints
- Querying the type of an expression
- Finding the definition of something
- Automatic refactoring

Tern is installed as an NPM package: =npm install -g tern=.

To enable Tern in emacs, the =tern= and =tern-auto-complete=
packages are installed.

For completion to work in a Node.js project, a =.tern-project= file like
this is required:

#+BEGIN_EXAMPLE
    {"plugins": {"node": {}}}
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
    {"libs": ["browser", "jquery"]}
#+END_EXAMPLE

If no project file is found, it’ll fall back to a default
configuration. You can change this default configuration by putting a
=.tern-config= file, with the same format as =.tern-project=, in your home
directory.

My =~/.tern-config= file looks like this:

#+BEGIN_SRC
{
  "libs": [
    "browser"
  ],
  "plugins": {
    "es_modules": {},
    "node": {}
  }
}
#+END_SRC

[[http://ternjs.net/doc/manual.html#configuration][Here]] is more documentation on how to configure a Tern project.

Tern shortcuts:

- =M-.= Jump to the definition of the thing under the cursor.
- =M-,= Brings you back to last place you were when you pressed M-..
- =C-c C-r= Rename the variable under the cursor.
- =C-c C-c= Find the type of the thing under the cursor.
- =C-c C-d= Find docs of the thing under the cursor. Press again to
  open the associated URL (if any).

**** Configuration

#+BEGIN_SRC emacs-lisp

  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (eval-after-load 'tern
     '(progn
        (require 'tern-auto-complete)
        (tern-ac-setup)))

#+END_SRC

*** =js2-refactor=
https://github.com/magnars/js2-refactor.el

A JavaScript refactoring library for Emacs.

#+BEGIN_SRC emacs-lisp
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-m")
#+END_SRC
*** General JavaScript configuration

#+BEGIN_SRC emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-highlight-level 3)
  (setq js-indent-level 4)
  ;; Semicolons are optional in JS, do not warn about them missing
  (setq js2-strict-missing-semi-warning nil)

#+END_SRC

** PugMode
*** Configuration

#+BEGIN_SRC emacs-lisp
  (add-hook 'pug-mode-hook (lambda () setq tab-width 4))
#+END_SRC

** Web
*** rainbow-mode
=rainbow-mode= is a minor mode for Emacs which displays strings
representing colors with the color they represent as background.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC
*** Process JSON

[[https://stedolan.github.io/jq/][jq]] is a lightweight and flexible command-line JSON processor.

Thanks to [[https://github.com/branch14/emacs.d][@branch14]] of 200ok fame for the function!

#+BEGIN_SRC emacs-lisp
(defun jq-json ()
  (interactive)
  (save-excursion
    (shell-command-on-region
     (point-min)
     (point-max)
     (read-string "Command: " "jq -M '.'") t t)))
#+END_SRC

*** web-mode

http://web-mode.org/

web-mode.el is an autonomous major-mode for editing web templates.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; Ruby Templates
  (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
  ;; Handlebars
  (add-to-list 'auto-mode-alist '("\\.hbs?\\'" . web-mode))
  ;; JSON
  (add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))

  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-ac-sources-alist
    '(("html" . (ac-source-words-in-buffer ac-source-abbrev))))
#+END_SRC

** p_slides

[[https://github.com/munen/p_slides][p_slides]] is a static files only, dead simple way, to create semantic
slides. The slide content is markdown, embedded in a HTML file. When
opening a =presentation.html= file, enable =markdown-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("presentation.html" . markdown-mode))
  (add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

** yaml

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook 'auto-fill-mode)

#+END_SRC

** Magit

Magit is an interface to the version control system Git.

*** Configuration

Create shortcut for =Magit=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** git-link

https://github.com/sshaw/git-link

Quickly create links to remote repositories.

*** Configuration

Enable git-link globally and bind to (=C-cgl)

#+BEGIN_SRC emacs-lisp
  (setq git-link-default-remote "upstream")
  (global-set-key "\C-cgl" 'git-link)
#+END_SRC

** Projectile

https://github.com/bbatsov/projectile

Projectile is a project interaction library. For instance -
finding project files (=C-c p f=)  or jumping to a new project (=C-c p
p=).

*** Configuration

Enable Projectile globally.
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

Register npm project type.
#+BEGIN_SRC emacs-lisp
  (projectile-register-project-type
   'npm '("package.json")
   :test "npm test"
   :test-suffix "Test")
#+END_SRC

Wrap 'projectile-find-implementation-or-test' to cache looked-up
files.
#+BEGIN_SRC emacs-lisp
  (defvar projectile-projects-impl-test-cache (make-hash-table :test 'equal))
  (defun cache-impl-test-files (orig-fun &rest args)
    (let ((cached-assoc-file (gethash (car args) projectile-projects-impl-test-cache)))
      (if cached-assoc-file
          cached-assoc-file
        (let ((res (apply orig-fun args)))
          (puthash (car args) (projectile-expand-root res) projectile-projects-impl-test-cache)
          res))))
  (advice-add 'projectile-find-implementation-or-test :around #'cache-impl-test-files)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun projectile-nodeunit-test-file ()
  "Run test command on a single file"
  (interactive)
  (let ((command (concat "NODE_ENV=test ALLOW_CONFIG_MUTATIONS=y node_modules/nodeunit/bin/nodeunit " (buffer-file-name)))
        (default-directory (projectile-compilation-dir)))
    (compile command)))
#+END_SRC
** Rust

*** Flycheck rust

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'rust-mode
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

* org-mode

Outline-based notes management and organizer. It is an outline-mode
for keeping track of everything.

** Plain Lists
Allow ‘a.’, ‘A.’, ‘a)’ and ‘A) as list elements:

#+BEGIN_SRC emacs-lisp

(setq org-list-allow-alphabetical t)

#+END_SRC

** General configuration

#+BEGIN_SRC emacs-lisp

  (require 'org)

  ; languages for org-babel support
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (sh . t)
     (js . t)
     ))

  (add-hook 'org-mode-hook 'auto-fill-mode)

  (setq org-directory "~/switchdrive/org/")

  (defun set-org-agenda-files ()
    "Set different org-files to be used in `org-agenda`."
    (setq org-agenda-files (list (concat org-directory "todo.org"))))

  (set-org-agenda-files)

  (global-set-key "\C-cl" 'org-store-link)

  ;; Allow =pdflatex= to use shell-commands
  ;; This will allow it to use =pygments= as syntax highlighter for exports to PDF
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  ;; Include =minted= package for LaTeX exports
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)


#+END_SRC

** KOMA Script export

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("scrartcl"
               "\\documentclass{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC
** Tufte org-mode export

#+BEGIN_SRC emacs-lisp

(require 'ox-latex)
(add-to-list 'org-latex-classes
	     '("tuftehandout"
	       "\\documentclass{tufte-handout}
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{amsmath}n
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+END_SRC

** Keyword sets

I use two workflow sets:

- One for TODOs which can either be TODO or DONE
- Another for tasks that I am WAITING for something to happen

Additionally I sometimes use the keywords PROJECT and AGENDA to denote
special bullets that I might tag (schedule/deadline) in the agenda.
These keywords give semantics to those bullets.

Note that "|" denotes a semantic state change that is reflected in a
different color. Putting the pipe at the end means that all states
prior should be shown in the same color.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
            '((sequence "TODO" "|" "DONE")
              (sequence "PROJECT" "AGENDA" "|" "MINUTES")
              (sequence "WAITING" "|")))
#+END_SRC

* pdf-tools

https://github.com/politza/pdf-tools

PDF Tools is, among other things, a replacement of DocView for PDF
files. The key difference is that pages are not pre-rendered by e.g.
ghostscript and stored in the file-system, but rather created
on-demand and stored in memory.

PDF Tools for me is - hands down - the best PDF viewer! It's not an
excuse to do even more within Emacs.

* Write Quality

** =writegood-mode=
https://github.com/bnbeckwith/writegood-mode

This is a minor mode to aid in finding common writing problems.

It highlights text based on a set of weasel-words, passive-voice and
duplicate words.

** Flyspell

Flyspell is a built-in minor mode for on-the-fly spell checking.

Flyspell uses ispell or aspell in the background. I'm using the
default (ispell) and have installed a German dictionary from [[http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html#German-dicts][here]].

*** Configuration

Order corrections by likeliness, not by the default of alphabetical
ordering.

#+BEGIN_SRC emacs-lisp
(setq flyspell-sort-corrections nil)
#+END_SRC

Do not print messages for every word (when checking the entire
buffer). This is a major performance gain.
#+BEGIN_SRC emacs-lisp
(setq flyspell-issue-message-flag nil)
#+END_SRC

Switch between German and English dictionaries.

#+BEGIN_SRC emacs-lisp
  (defun flyspell-switch-dictionary()
    "Switch between German and English dictionaries"
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "deutsch") "english" "deutsch")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC

*** Do not loose all spellchecking information after adding one word to a personal dictionary

Advice to re-check the buffer after a word has been added to the
dictionary. This has the benefit of the word actually being cleared,
but the downside that the whole buffer has to be re-checked which an
take some time.

#+BEGIN_SRC emacs-lisp

(defun flyspell-buffer-after-pdict-save (&rest _)
  (flyspell-buffer))

(advice-add 'ispell-pdict-save :after #'flyspell-buffer-after-pdict-save)

#+END_SRC

The proper solution (for which I don't have time now) is to just mark
all further occurrences of the word you just saved as correct (without
having to recheck the whole buffer).

*** TODO Implement =ispell-pdict-save= with above requirement

* OS Specific
** Linux
** macOS
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f11>") 'toggle-frame-fullscreen)
#+END_SRC
