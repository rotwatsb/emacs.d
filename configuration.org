#+TITLE: Emacs configuration
#+AUTHOR: Stephen Bradley

# create new code blocks with C-c C-,
# org babel key bindings: [[https://org-babel.readthedocs.io/en/latest/key-bindings/]]

* Installation

*Initial*

Emacs configuration is usually done in the home directory in the
=.emacs.d= folder. This holds true for Unix and Linux systems. For
Windows, look it up [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html][here]].

=git clone git@github.com:rotwatsb/emacs.d.git ~/.emacs.d=

*Dependencies*

Emacs dependencies/libraries are managed via the internal [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages][package
management system]]. To initially install packages, open
=~/.emacs.d/init.el=, refresh your package list with =M-x
package-refresh-contents= and install everything using =M-x
eval-buffer=.

* Dependency management
** Define packages that are to be installed

List all used third-party packages. Most will be configured further
down in this file, some are used with the default configuration.

#+BEGIN_SRC emacs-lisp
  (defvar my-packages '(request
                        flx-ido
                        exec-path-from-shell
                        flymake-eslint
                        projectile
                        markdown-mode
                        magit
                        magit-popup
                        git-link
                        perspective
                        persp-projectile
                        web-mode
                        yasnippet
                        which-key
                        prettier
                        rust-mode
                        terraform-mode
                        org-bullets
                        org-roam
                        forge
                        code-review
                        solarized-theme
                        atom-one-dark-theme
                        csv-mode
                        graphql-mode
                        corfu
                        cape
                        ))
#+END_SRC
** Install packages
#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (straight-use-package p))

  (straight-use-package '(openai :type git :host github :repo "emacs-openai/openai"))
  (straight-use-package '(chatgpt :type git :host github :repo "emacs-openai/chatgpt"))

  (straight-use-package '(ruby-ts-mode :type git :host github :repo "pedz/ruby-ts-mode"))
  (straight-use-package '(combobulate :type git :host github :repo "mickeynp/combobulate"))
#+END_SRC
** Load unpackaged emacs lisp
#+BEGIN_SRC emacs-lisp
  (setq
    elisp-dir
    (concat
      (getenv "HOME")
      "/.emacs.d/elisp/"))

  (defun get-elisp-subdirs ()
    (seq-filter
      (lambda (dirname) (and (not (equal dirname ".")) (not (equal dirname ".."))))
      (directory-files elisp-dir)))

  (dolist
    (uelisp (get-elisp-subdirs))
    (progn
      (add-to-list
        'load-path
        (concat
          elisp-dir
          uelisp))))
#+END_SRC
* Default Settings
This section contains settings for built-in Emacs features.
** Disable exernal pin entry for GPG
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+end_src
** Prefer newer source files over byte-complied versions
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC
** Set default frame size
#+BEGIN_SRC emacs-lisp
  (defun my-set-frame-size ()
    (when window-system (set-frame-size (selected-frame) 235 100)))

  (defun my-new-frame ()
    (my-set-frame-size)
    (call-interactively #'projectile-persp-switch-project))

  (add-hook 'after-init-hook (lambda () (my-set-frame-size)))

  (advice-add 'make-frame-command :after #'my-new-frame)
#+END_SRC
** Gargabe Collection
Allow 20MB of memory (instead of 0.76MB) before calling garbage
collection. This means GC runs less often, which speeds up some
operations.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC
** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
** Auto-Save in =/tmp=
Store backups and auto-saved files in =TEMPORARY-FILE-DIRECTORY= (which
defaults to /tmp on Unix), instead of in the same directory as the
file.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC
** Always follow symlinks
When opening a file, always follow symlinks.
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
** Sentences have one space after a period
Don't assume that sentences should have two spaces after
periods.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC
** Confirm before closing Emacs
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** Human readable units in =dired-mode=
#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+END_SRC
** Ask =y/n= instead of =yes/no=
This is a favorable shorthand.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Auto revert files on change
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC
** Shortcut for changing font-size
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-1") 'text-scale-increase)
  (define-key global-map (kbd "C-0") 'text-scale-decrease)
#+END_SRC
** Disable startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+END_SRC
** Do not display GUI Toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode -1)
#+END_SRC
** Enable Narrow To Region
Enable narrow-to-region (C-x n n / C-x n w). This is disabled by
default to not confuse beginners.
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Bell
Do not ring the system bell or show a visible feedback.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Custom-File
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom-settings.el")
  (load custom-file t)
#+END_SRC
** Navigation
More efficient intra-buffer navigation.
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "M-p") (lambda () (interactive) (forward-line -4)))
  (define-key global-map (kbd "M-n") (lambda () (interactive) (forward-line 4)))
#+END_SRC

** set default them
#+BEGIN_SRC emacs-lisp
  (load-theme 'atom-one-dark t)
#+END_SRC
**
#+BEGIN_SRC emacs-lisp
  (defun my-copy-to-clipboard ()
    (interactive)
    (if (use-region-p)
        (shell-command
         (concat "echo \"" (buffer-substring-no-properties (region-beginning) (region-end)) "\" | pbcopy"))
      ()
      ))

  (global-set-key (kbd "M-c") 'my-copy-to-clipboard)
#+END_SRC
** Use Command as meta without remapping/rebinding
#+begin_src emacs-lisp
  (setq mac-command-modifier 'meta)
#+end_src
** Tab bar format
#+begin_src emacs-lisp
  (setq tab-bar-format '(tab-bar-format-global))
  (tab-bar-mode)
#+end_src
* which-key mode
Turn it on by default
#+begin_src emacs-lisp
  (which-key-mode)
#+end_src

#+RESULTS:
: t

* ido-mode
First, set the find-file-at-point bindings (before overriding with ido
bindings)

#+BEGIN_SRC emacs-lisp
  (setq ffap-require-prefix t)
  (ffap-bindings)
#+END_SRC

=ido= means "Interactively Do Things"

This changes many defaults like =find-file= and switching
buffers. =ido= has a completion engine that's sensible to use
everywhere.

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

* Search
Replace i-search-(forward|backward) with their respective regexp
capable counterparts

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

#+END_SRC

* Corfu
#+begin_src emacs-lisp
  (setq corfu-auto t)
  (setq corfu-cycle t)
  (global-corfu-mode)
#+end_src

* Cape
#+begin_src emacs-lisp
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
#+end_src

* Magit
** forge
Load forge after magit

#+begin_src emacs-lisp
  (with-eval-after-load 'magit
    (require 'forge))
#+end_src
** [[https://github.com/wandersoncferreira/code-review][Code Review]]

Use passwords configured for forge

#+begin_src emacs-lisp
  (setq code-review-auth-login-marker 'forge)
#+end_src

Create keybinding for code-review at point

#+begin_src emacs-lisp
  (with-eval-after-load 'code-review
    (define-key forge-topic-mode-map (kbd "C-c r") 'code-review-forge-pr-at-point))
#+end_src
* Org
  #+begin_src emacs-lisp
    (require 'org-bullets)
    (add-hook 'org-mode-hook
              (lambda ()
                (auto-fill-mode 0)
                (visual-line-mode 1)
                (org-indent-mode)
                (org-bullets-mode 1)))
    (require 'org-roam)
    (define-key org-mode-map (kbd "C-c n i") 'org-roam-node-insert)
    (define-key org-mode-map (kbd "C-c n l") 'org-roam-buffer-toggle)
    (define-key org-mode-map (kbd "C-c n f") 'org-roam-node-find)

    (setq org-roam-capture-templates '(("d" "default" plain "%?"
                                        :target (file+head "${slug}.org.gpg"
                                                           "#+title: ${title}\n")
                                        :unnarrowed t)))

  #+end_src
  
** Org Roam
#+begin_src emacs-lisp
  (setq org-roam-directory (file-truename "~/notes"))
  (org-roam-db-autosync-mode)
#+end_src
* Chatgpt
#+begin_src emacs-lisp
  (require 'chatgpt)
  (setq openai-key (getenv "OPENAI_API_KEY"))
#+end_src
* Programming
** General
*** compilation mode
The `compilation-filter-hook` is a hook function run after the output of
a command run in a compilation buffer has been inserted. The hook
function, `ansi-color-compilation-filter`, processes the compilation
output and applies ANSI color codes to the output according to the
terminal color codes.

The effect of this configuration is that when you run a command that
outputs colored text in an Emacs buffer (such as a compilation buffer
or shell buffer), the output will be colored according to the ANSI
color codes. This makes it easier to read and interpret the output.

#+begin_src emacs-lisp
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+end_src

Tell compilation mode how to handle eslint output in compilation mode.
#+begin_src emacs-lisp
  (require 'compile)

  (defun add-compilation-pattern(pat)
    (let ((alist-key (car pat)))
      (progn
        (setq compilation-error-regexp-alist-alist (cons pat compilation-error-regexp-alist-alist))
        (setq compilation-error-regexp-alist (cons alist-key compilation-error-regexp-alist)))))

  (let ((compilation-patterns
         '(
           (eslint-line "^[[[[:space:]]]]+\\([0-9]+\\):\\([0-9]+\\)[[[[:space:]]]]+\\(?:\\(warning\\)\\|\\(info\\)\\).*$" nil 1 2 (3 . 4))
           (eslint-file "^\\(/.+\\.[a-z]+\\)$" 1 nil nil)
           (my-typescript-tsc-pretty "^\\\s+\\(.*\\):\\([0-9]+\\):\\([0-9]+\\).*" 1 2 3 2))))
    (dolist (pat compilation-patterns)
      (add-compilation-pattern pat)))
#+end_src
*** Tabs
Use 4 spaces instead of a tab.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Indentation cannot insert tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
*** Auto-indent with the Return key

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
*** Highlight matching parenthesis

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
*** Configure Flymake
#+BEGIN_SRC emacs-lisp
  (add-hook 'flymake-mode-hook
    (lambda () (define-key flymake-mode-map (kbd "C-c C-.") 'flymake-goto-next-error)))
  (add-hook 'flymake-mode-hook
    (lambda () (define-key flymake-mode-map (kbd "C-c C-,") 'flymake-goto-prev-error)))
#+END_SRC
*** Delete trailing whitespace

Delete trailing whitespace in all modes. _Except_ when editing
Markdown, because it uses [[http://daringfireball.net/projects/markdown/syntax#p][two trailing blanks]] as a signal to create a
line break.

#+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook '(lambda()
                                  (when (not (or (derived-mode-p 'markdown-mode)
                                                 (derived-mode-p 'org-mode))
                                    (delete-trailing-whitespace)))))
#+END_SRC
** git-link

https://github.com/sshaw/git-link

Quickly create links to remote repositories.

Enable git-link globally and bind to (=C-cgl)

#+BEGIN_SRC emacs-lisp
  (setq git-link-default-remote "origin")
  (global-set-key "\C-cgl" 'git-link)
#+END_SRC
** tree-sitter
#+begin_src emacs-lisp
  (require 'treesit)
  (defun mp-setup-install-grammars ()
    "Install Tree-sitter grammars if they are absent."
    (interactive)
    (dolist (grammar
             '((css "https://github.com/tree-sitter/tree-sitter-css")
               (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
               (python "https://github.com/tree-sitter/tree-sitter-python")
               (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
               (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
      (add-to-list 'treesit-language-source-alist grammar)
      ;; Only install `grammar' if we don't already have it
      ;; installed. However, if you want to *update* a grammar then
      ;; this obviously prevents that from happening.
      (unless (treesit-language-available-p (car grammar))
        (treesit-install-language-grammar (car grammar)))))

  (mp-setup-install-grammars)
#+end_src
** combobulate
#+begin_src emacs-lisp
  (require 'combobulate)
  (setq combobulate-key-prefix "C-c o")
  (add-hook 'typescript-ts-mode-hook 'combobulate-mode)
#+end_src
** web-mode

http://web-mode.org/

web-mode.el is an autonomous major-mode for editing web templates.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; Ruby Templates
  (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
  ;; Handlebars
  (add-to-list 'auto-mode-alist '("\\.hbs?\\'" . web-mode))
  ;; JSON
  (add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))

  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-ac-sources-alist
    '(("html" . (ac-source-words-in-buffer ac-source-abbrev))))

  (setq web-mode-markup-indent-offset 4)
  (setq web-mode-code-indent-offset 2)
#+END_SRC
** yaml-mode

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)

  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
#+END_SRC
** graphql
Use graphql-mode for graphql files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.graphql\\'" . graphql-mode))
  (add-to-list 'auto-mode-alist '("\\.graphqls\\'" . graphql-mode))
#+end_src
** javascript
*** General configuration
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
  (setq typescript-ts-mode-indent-offset 2)
  (setq js-ts-mode-indent-offset 2)
  (add-hook 'js-ts-mode-hook 'eglot-ensure)
  (add-hook 'typescript-ts-mode-hook 'eglot-ensure)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;(require 'typescript-mode)
  ;(setq typescript-indent-level 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.cjs\\'" . js-ts-mode))
  ;(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
#+END_SRC
*** Require eslint-flymake
#+BEGIN_SRC emacs-lisp
  (require 'flymake-eslint)
#+END_SRC
** ruby
Use treesitter's ruby-mode for *.rb
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-ts-mode))
#+END_SRC

Use eglot lsp server with ruby
#+begin_src emacs-lisp
  (add-hook 'ruby-ts-mode-hook 'eglot-ensure)
#+end_src
** rust
#+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook
    (lambda () (define-key rust-mode-map (kbd "C-c C-c") 'rust-compile)))
  (add-hook 'rust-mode-hook
    (lambda () (define-key rust-mode-map (kbd "C-c C-r") 'rust-run)))
#+END_SRC
** python
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'eglot-ensure)
#+end_src
** perspectives
*** Configuration
#+BEGIN_SRC emacs-lisp
  (require 'perspective)
  (customize-set-variable 'persp-mode-prefix-key (kbd "C-z"))
  (define-key persp-mode-map (kbd "C-x C-n") 'persp-next)
  (define-key persp-mode-map (kbd "C-x C-p") 'persp-prev)
#+END_SRC

** projectile

https://github.com/bbatsov/projectile

Projectile is a project interaction library. For instance -
finding project files (=C-c p f=)  or jumping to a new project (=C-c p
p=).

*** Configuration

Enable Projectile globally.
#+BEGIN_SRC emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

Register ember project type.
#+BEGIN_SRC emacs-lisp
  (projectile-register-project-type
   'ember '(".ember-cli")
   :test "npm test"
   :test-suffix "-test")
#+END_SRC

Register npm project type.
#+BEGIN_SRC emacs-lisp
  (projectile-register-project-type
   'npm '(".package.json")
   :test "npm test"
   :test-suffix "Test")
#+END_SRC

Wrap 'projectile-find-implementation-or-test' to cache looked-up
files.
#+BEGIN_SRC emacs-lisp
  (defvar projectile-projects-impl-test-cache (make-hash-table :test 'equal))
  (defun cache-impl-test-files (orig-fun &rest args)
    (let ((cached-assoc-file (gethash (car args) projectile-projects-impl-test-cache)))
      (if cached-assoc-file
          cached-assoc-file
        (let ((res (apply orig-fun args)))
          (puthash (car args) (projectile-expand-root res) projectile-projects-impl-test-cache)
          res))))
  (advice-add 'projectile-find-implementation-or-test :around #'cache-impl-test-files)
#+END_SRC

Remap projectile-switch-project with projectile-persp-switch-project
#+BEGIN_SRC emacs-lisp
  (persp-mode)
  (define-key projectile-mode-map [remap projectile-switch-project] 'projectile-persp-switch-project)
#+END_SRC

After persp switch, set default-directory of new scratch buffer and call find-file
#+BEGIN_SRC emacs-lisp
  (defun my-no-action () ())
  (setq projectile-switch-project-action 'my-no-action)

  (defun my-projectile-persp-switch-project (orig-fun &rest args)
    (progn
      (apply orig-fun args)
      (set-buffer (persp-scratch-buffer))
      (setq default-directory (car args))
      (call-interactively #'find-file)))
  (advice-add 'projectile-persp-switch-project :around #'my-projectile-persp-switch-project)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun my-perspective-buffer-name (orig-fun &rest args)
    (concat (apply orig-fun args) " (" (persp-current-name) ")"))

  (advice-add 'compilation--default-buffer-name :around #'my-perspective-buffer-name)
#+END_SRC

* eshell
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ce" 'eshell)
#+END_SRC
* OS Specific
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC
** Linux
** macOS
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f11>") 'toggle-frame-fullscreen)
#+END_SRC
